[
  {
    "objectID": "cheatsheets.html",
    "href": "cheatsheets.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "Lot’s of work in progress."
  },
  {
    "objectID": "tutorials/lecture_01/02_github.html",
    "href": "tutorials/lecture_01/02_github.html",
    "title": "GitHub basics",
    "section": "",
    "text": "To interact with GitHub from your terminal or command prompt, you’ll need to have Git installed. If you haven’t done this yet, refer to previous sections of this guide for installation instructions.\n\n\n\n\n\n\nAccess the Command Line Tool\n\n\n\n\nFor Windows users, to open Command Prompt, press the Windows key and type “Command Prompt”, and hit Enter.\nFor macOS users, open Spotlight Search by pressing ⌘ and space bar simultaneously, then type “Terminal” and hit Enter.\nFor Linux users, you can use the search feature in your distribution’s application menu and type “Terminal”, or you can use the keyboard shortcut Ctrl + Alt+ T.\n\n\n\nWith Git installed, let’s cover some basic command line interaction with GitHub:\n\n\nBefore you start using Git, you should configure your name and email address as they’ll be attached to your commits:\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your-email@example.com\"\nReplace “Your Name” and “your-email@example.com” with your GitHub username and associated email address.\n\n\n\n\nGo to GitHub’s website and click the + button in the upper-right corner, then New repository.\nGive your repository a name, optional description, choose to make it public or private, then click Create repository.\n\n\n\n\nTo clone (download) a repository to your local machine:\ngit clone https://github.com/username/repository.git\nReplace ‘username’ and ‘repository.git’ with the username and repository name from GitHub.\nAfter cloning, navigate into the newly created directory by cd repository (replace ‘repository’ with your repository’s name).\n\n\n\nWhenever you make changes to a file, Git recognizes that a file has changed in your repository. To commit these changes:\n\nAdd the files to the staging area with git add . The . tells Git to add all the changed files.\nCommit the changes with a message describing the changes you’ve made using git commit -m \"Your descriptive message here\".\n\n\n\n\nTo upload your changes to GitHub:\ngit push origin branch-name\nReplace ‘branch-name’ with the name of the branch you’re pushing to."
  },
  {
    "objectID": "tutorials/lecture_01/02_github.html#using-github-from-the-command-line",
    "href": "tutorials/lecture_01/02_github.html#using-github-from-the-command-line",
    "title": "GitHub basics",
    "section": "",
    "text": "To interact with GitHub from your terminal or command prompt, you’ll need to have Git installed. If you haven’t done this yet, refer to previous sections of this guide for installation instructions.\n\n\n\n\n\n\nAccess the Command Line Tool\n\n\n\n\nFor Windows users, to open Command Prompt, press the Windows key and type “Command Prompt”, and hit Enter.\nFor macOS users, open Spotlight Search by pressing ⌘ and space bar simultaneously, then type “Terminal” and hit Enter.\nFor Linux users, you can use the search feature in your distribution’s application menu and type “Terminal”, or you can use the keyboard shortcut Ctrl + Alt+ T.\n\n\n\nWith Git installed, let’s cover some basic command line interaction with GitHub:\n\n\nBefore you start using Git, you should configure your name and email address as they’ll be attached to your commits:\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your-email@example.com\"\nReplace “Your Name” and “your-email@example.com” with your GitHub username and associated email address.\n\n\n\n\nGo to GitHub’s website and click the + button in the upper-right corner, then New repository.\nGive your repository a name, optional description, choose to make it public or private, then click Create repository.\n\n\n\n\nTo clone (download) a repository to your local machine:\ngit clone https://github.com/username/repository.git\nReplace ‘username’ and ‘repository.git’ with the username and repository name from GitHub.\nAfter cloning, navigate into the newly created directory by cd repository (replace ‘repository’ with your repository’s name).\n\n\n\nWhenever you make changes to a file, Git recognizes that a file has changed in your repository. To commit these changes:\n\nAdd the files to the staging area with git add . The . tells Git to add all the changed files.\nCommit the changes with a message describing the changes you’ve made using git commit -m \"Your descriptive message here\".\n\n\n\n\nTo upload your changes to GitHub:\ngit push origin branch-name\nReplace ‘branch-name’ with the name of the branch you’re pushing to."
  },
  {
    "objectID": "tutorials/lecture_01/02_github.html#more-git-commands",
    "href": "tutorials/lecture_01/02_github.html#more-git-commands",
    "title": "GitHub basics",
    "section": "More Git Commands",
    "text": "More Git Commands\nTwo important Git commands that can help you better understand and manage your project’s changes are git status and git diff.\n\nGit Status\ngit status shows you the status of changes as untracked, modified or staged. It’s a way to see what changes are queued for the next commit stage. When you run git status, Git will show you which branch you’re on, what changes exist in your working directory, and what changes have been staged.\nHere’s how to use it:\n\nNavigate to your git directory using cd in your terminal or command prompt.\nType git status and hit Enter.\n\nYou should now see a list of any modified or untracked files.\n\n\nGit Diff\ngit diff shows you the differences between your staged changes and your last commit. By using git diff, you can see line-by-line what has been added or removed from each file since the last commit.\nHere’s how to use it:\n\nNavigate to your git directory using cd in your terminal or command prompt.\nType git diff and hit Enter.\n\nNow, you’ll be able to see exactly what changes were made. Green lines represent additions to files, while red lines represent deletions.\nRemember, if you want to see the differences between your working directory and the staging area (the changes that haven’t been staged yet), simply use git diff without any files specified. However, if you want to see the differences in the staging area or between commits (the changes that have been staged), you should use git diff --staged.\n‘git status’ and ‘git diff’ are both essential commands for understanding your project’s changes and managing your staging area. Make sure to use these regularly to keep track of what’s going on in your repository.\n\n\nCreating a New Branch\nBranches allow you to work on different versions of your project simultaneously. To create a new branch:\ngit branch new-branch\nReplace ‘new-branch’ with your desired branch name.\n\n\nSwitching Between Branches\nTo switch from your current branch to another branch:\ngit checkout branch-name\nReplace ‘branch-name’ with the name of the branch you want to switch to.\n\n\nBasic Exercises\n\n\n\n\n\n\nExercise 1:\n\n\n\nClone the following GitHub repository, make a new branch, copy the expectations_template.txt file, rename it, make changes to a file, commit those changes, do another pull, and then push them to GitHub.\n\n\n\n\n\n\n\n\nExercise 2:\n\n\n\nOn your own GitHub test_demo repository (that you should have created in the configuration tutorial), add a new file, then add and commit that new file before pushing the changes to GitHub.\n\n\n\n\n\n\n\n\nExercise 3:\n\n\n\nFrom the cloned ch200-expectations repository, download the changes made by other students using git pull.\n\n\nIf you run into any issues, remember: your best friends are often the documentation, a quick web search (StackOverflow) or ChatGPT. The answers are almost always out there!"
  },
  {
    "objectID": "tutorials/lecture_01/02_github.html#advanced-introduction-to-pull-requests",
    "href": "tutorials/lecture_01/02_github.html#advanced-introduction-to-pull-requests",
    "title": "GitHub basics",
    "section": "(Advanced) Introduction to Pull Requests",
    "text": "(Advanced) Introduction to Pull Requests\nA pull request is a important feature in collaborating with Git and GitHub. It’s the way you can suggest changes you’ve made in a branch to be reviewed and potentially merged into another branch, usually the main branch.\nUsually, pull requests are made when you’ve finished working on a feature or fix and you believe it’s ready to be included in the main codebase. They are called ‘pull requests’ because you’re asking the repository maintainer to ‘pull’ your changes.\nHere’s a basic flow of how to create a pull request on GitHub:\n\nFork the repository or create a new branch in the repository where you want to make changes.\nMake your changes in your branch. This could involve editing files, adding files, or removing files.\nPush these changes to your GitHub repository.\nGo to the main page of the GitHub repository where you want to propose changes.\nClick on the Pull request button.\nClick on the New pull request button.\nSelect your fork or branch on the right dropdown menu and the main repository or branch on the left.\nReview your changes and if everything looks good, click on the Create pull request button.\nAdd a title to your pull request and describe the changes you’ve made, then click Create pull request.\n\nOnce a pull request has been opened, the repository owner or collaborators can review the changes, discuss potential modifications, and even push follow-up commits if necessary.\nThen, when all parties agree that the changes are ready, the owner or authorized collaborator can merge your changes into the original branch.\nRemember, properly communicating what changes you’ve made and why you made them in the pull request description is an integral part of effective collaboration."
  },
  {
    "objectID": "tutorials/lecture_01/02_github.html#summary-of-the-commands",
    "href": "tutorials/lecture_01/02_github.html#summary-of-the-commands",
    "title": "GitHub basics",
    "section": "Summary of the commands",
    "text": "Summary of the commands\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit config --global user.name \"name\"\nSet your name in git configuration (only once)\n\n\ngit config --global user.email \"email\"\nSet your email in git configuration (only once)\n\n\ngit clone https://github.com/username/repository.git\nClone a GitHub repository to your local machine\n\n\ngit branch branch-name\nCreate a new branch\n\n\ngit checkout branch-name\nSwitch to another branch\n\n\ngit add .\nTrack all changes in directory\n\n\ngit commit -m \"commit message\"\nCommit your tracked changes\n\n\ngit push origin branch-name\nPush your local commits to the GitHub\n\n\ngit pull origin branch-name\nFetch the newest updates from the remote branch\n\n\ngit status\nCheck the status of your local repository\n\n\ngit diff\nShow changes between your working directory and the last commit\n\n\ngit diff --staged\nShow changes between your staging area and the last commit\n\n\n\nAbove are the basic Git commands you’ll frequently use which cover most of the general use cases from cloning repositories to making changes and updating your remote branches. Each command is a powerful tool in Git, and they are designed to work together to create a seamless workflow.\nRemember, the best way to become comfortable with Git is practice. Try using these commands to manage a test project and experiment until you’re confident with the functionality of each one."
  },
  {
    "objectID": "slides/lecture_01/index.html#getting-up",
    "href": "slides/lecture_01/index.html#getting-up",
    "title": "Habits",
    "section": "Getting up",
    "text": "Getting up\n\nTurn off alarm\nGet out of bed"
  },
  {
    "objectID": "slides/lecture_01/index.html#going-to-sleep",
    "href": "slides/lecture_01/index.html#going-to-sleep",
    "title": "Habits",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Practical Programming for Chemistry",
    "section": "",
    "text": "This course provides a comprehensive and practical introduction to computer programming with a specific focus on its application for chemists and chemical engineers. The course assumes little programming experience and primarily uses Python as the teaching language. The content covers crucial programming concepts like data types, control structures, string processing, functions, and input/output operations. These concepts are taught within the context of chemical tasks.\nThe course format consists lessons on diverse topics and hands-on exercise sessions. We will cover the basics of configuring a computer and an introduction to Jupyter(Lab), a popular tool used in data science and cheminformatics. The course will teach basic command line skills, usage of variables, operators, and types, more about operators and conditionals, lists and tuples, iteration, and functions. Lessons cover string methods, dictionaries, packages and modules, file I/O, the use of Git for version control, errors and exception handling, style, comprehensions, and an introduction to Pandas and RDKit for chemical data manipulation. The course will also contain lessons on managing and cleaning data, along with making plots.\n\n\n\nWeek\nTopic\nSlides\nTutorials\n\n\n\n\n\nGetting started\nSlides 01\nBasic setup\n\n\n\n\n\nGitHub intro"
  },
  {
    "objectID": "index.html#content",
    "href": "index.html#content",
    "title": "Practical Programming for Chemistry",
    "section": "",
    "text": "This course provides a comprehensive and practical introduction to computer programming with a specific focus on its application for chemists and chemical engineers. The course assumes little programming experience and primarily uses Python as the teaching language. The content covers crucial programming concepts like data types, control structures, string processing, functions, and input/output operations. These concepts are taught within the context of chemical tasks.\nThe course format consists lessons on diverse topics and hands-on exercise sessions. We will cover the basics of configuring a computer and an introduction to Jupyter(Lab), a popular tool used in data science and cheminformatics. The course will teach basic command line skills, usage of variables, operators, and types, more about operators and conditionals, lists and tuples, iteration, and functions. Lessons cover string methods, dictionaries, packages and modules, file I/O, the use of Git for version control, errors and exception handling, style, comprehensions, and an introduction to Pandas and RDKit for chemical data manipulation. The course will also contain lessons on managing and cleaning data, along with making plots.\n\n\n\nWeek\nTopic\nSlides\nTutorials\n\n\n\n\n\nGetting started\nSlides 01\nBasic setup\n\n\n\n\n\nGitHub intro"
  },
  {
    "objectID": "tutorials/lecture_01/03_ssh_connection.html",
    "href": "tutorials/lecture_01/03_ssh_connection.html",
    "title": "Connecting to GitHub using SSH",
    "section": "",
    "text": "SSH stands for Secure Shell. It’s a protocol used to securely connect and interact with servers. When it comes to GitHub, using SSH keys can simplify the process of interacting with your repositories.\nInstead of entering your username and password every time you perform a Git operation, using SSH keys involves creating a pair of keys - a private key (kept secret on your machine) and a public key (added to your GitHub account). This pair forms a secure connection between your machine and GitHub without having to supply your username and password each time.\n\n\n\n\n\n\nWhy should I do this? sounds complicated…\n\n\n\nIt will save you a lot of time, as you won’t have to type your username and password every single time you download a GitHub repository."
  },
  {
    "objectID": "tutorials/lecture_01/03_ssh_connection.html#checking-for-existing-ssh-keys",
    "href": "tutorials/lecture_01/03_ssh_connection.html#checking-for-existing-ssh-keys",
    "title": "Connecting to GitHub using SSH",
    "section": "Checking for Existing SSH Keys",
    "text": "Checking for Existing SSH Keys\nBefore we generate an SSH key, we need to check for existing ones.\nOn macOS/Linux, open Terminal and enter:\nls -al ~/.ssh\nOn Windows, open Git Bash and enter:\nls -al ~/.ssh\nIf you see files named id_rsa.pub, id_ed25519.pub or id_ecdsa.pub then you have existing keys. If you want to keep those and not override them, you can skip the next step."
  },
  {
    "objectID": "tutorials/lecture_01/03_ssh_connection.html#generating-a-new-ssh-key",
    "href": "tutorials/lecture_01/03_ssh_connection.html#generating-a-new-ssh-key",
    "title": "Connecting to GitHub using SSH",
    "section": "Generating a new SSH key",
    "text": "Generating a new SSH key\nIf you don’t have an existing SSH key or want to create a new one, here’s how you can do it:\nOn macOS/Linux, open Terminal and use the following command, replacing “your_email@example.com” with your GitHub email address:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nOn Windows, open Git Bash and use the same command:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nYou’ll be asked to enter a file in which to save the key, you can just press Enter to accept the default file location.\nNext, you’ll be asked to enter a secure passphrase. While it’s optional, it’s good practice to enter one for an added layer of security.\nThe entire process would look something like this:\n&gt; ssh-keygen -t ed25519 -C \"your_email@example.com\"\n&gt; Generating public/private ed25519 key pair.\n&gt; Enter file in which to save the key (/Users/you/.ssh/id_ed25519): [Press enter]\n&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]\n&gt; Enter same passphrase again: [Type passphrase again]\nYour SSH key pair is now generated!"
  },
  {
    "objectID": "tutorials/lecture_01/03_ssh_connection.html#adding-your-ssh-key-to-the-ssh-agent",
    "href": "tutorials/lecture_01/03_ssh_connection.html#adding-your-ssh-key-to-the-ssh-agent",
    "title": "Connecting to GitHub using SSH",
    "section": "Adding Your SSH Key to the ssh-agent",
    "text": "Adding Your SSH Key to the ssh-agent\nBefore adding a new SSH key to your GitHub account, we should add it to the ssh-agent software on your computer.\n\nStart the ssh-agent in the background with the following command:\n\nOn macOS/Linux, open Terminal and use:\neval \"$(ssh-agent -s)\"\nOn Windows, open Git Bash and use:\neval \"$(ssh-agent -s)\"\n\nNext, add your SSH private key to the ssh-agent.\n\nIf you used a custom name for your SSH key, replace id_ed25519 accordingly, else:\nOn macOS you can use the ssh-add command like so:\nssh-add -K ~/.ssh/id_ed25519\nOn Windows and Linux use:\nssh-add ~/.ssh/id_ed25519"
  },
  {
    "objectID": "tutorials/lecture_01/03_ssh_connection.html#adding-ssh-key-to-your-github-account",
    "href": "tutorials/lecture_01/03_ssh_connection.html#adding-ssh-key-to-your-github-account",
    "title": "Connecting to GitHub using SSH",
    "section": "Adding SSH key to your GitHub Account",
    "text": "Adding SSH key to your GitHub Account\n\nNow you need to add the SSH key to your GitHub account. First, you need to copy the SSH key to your clipboard.\nOn macOS/Linux, use the pbcopy command:\npbcopy &lt; ~/.ssh/id_ed25519.pub\nOn Windows, use the clip command:\nclip &lt; ~/.ssh/id_ed25519.pub\nGo to GitHub, click on your profile picture and then click on Settings.\nOn the left side of the page, click on SSH and GPG keys.\nClick on the New SSH Key button.\nGive your key a title (it’s useful to use the name of your machine) and paste the key into the “Key” field. It should start with ssh-ed25519 or ssh-rsa.\nClick the Add SSH Key button to complete the process."
  },
  {
    "objectID": "tutorials/lecture_01/03_ssh_connection.html#testing-your-ssh-connection",
    "href": "tutorials/lecture_01/03_ssh_connection.html#testing-your-ssh-connection",
    "title": "Connecting to GitHub using SSH",
    "section": "Testing your SSH Connection",
    "text": "Testing your SSH Connection\nFinally, to ensure that everything is set up correctly:\n\nOpen Terminal or Git Bash and enter the following command:\n\nssh -T git@github.com\n\nYou’ll see a message like this:\n\nThe authenticity of host 'github.com (IP ADDRESS)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? \nType yes. Then, you’ll receive a message like this:\nHi &lt;your_GitHub_username&gt;! You've successfully authenticated, but GitHub does not provide shell access.\nIf you see the above message, you’ve successfully set up SSH authentication to GitHub. Now, you can use Git without having to enter your username and password every time for each operation.\nGreat! Now you understand how to connect to GitHub using SSH on Windows, macOS, and Linux.\nGoing forward, if you want to clone any repository from GitHub, use the SSH URL which starts with “git@github.com” instead of HTTPS.\nFor example:\ngit clone git@github.com:username/repository.git\nWith the SSH link, your machine will use the SSH key pair to authenticate with GitHub, so you won’t have to enter your username (or email) and password each time you perform any git operations like push or pull.\nRemember, if you have multiple GitHub accounts or if you use multiple machines, you will need to generate a unique ssh-key pair for each combination of GitHub account and machine. You can manage all your SSH keys within the settings of your GitHub account.\nThrough SSH keys, you have established a secure connection between your machine and GitHub. This will significantly simplify your work-flow, especially when working on bigger projects.\nAlso, make sure to keep your private key (~/.ssh/id_ed25519 in our case) confidential and secure, don’t share it with anyone. Your public key (~/.ssh/id_ed25519.pub in our case) is the one you add to your GitHub account."
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html",
    "href": "tutorials/lecture_01/01_setup.html",
    "title": "How to set up my computer",
    "section": "",
    "text": "In this first tutorial, you will have to download a few prerquisites to get started with the course.\nBefore you begin learning Python, there are few prerequisites that you need to install and a few concepts that you need to familiarize yourself with."
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html#creating-a-github-account",
    "href": "tutorials/lecture_01/01_setup.html#creating-a-github-account",
    "title": "How to set up my computer",
    "section": "Creating a GitHub Account",
    "text": "Creating a GitHub Account\nHere are the simple steps to set up a new GitHub account:\n\nOpen your web browser and navigate to https://github.com/.\nClick on the Sign Up button located in the top right corner of GitHub’s homepage.\nOn the next page, provide the required details including a new Username, a valid Email Address, and a Password. Make sure to verify that the password is at least 15 characters long or at least 8 characters long with a combination of letters, numbers, and symbols.\nReview GitHub’s Terms of Service and Privacy Statement, and if you agree, click on Create an account.\nNext, you might be guided through a few survey questions. You can answer them or directly click on Complete Setup.\nYou’ll be sent an email to the address you provided. In that email, click Verify email address.\nThat’s it! You should now have a GitHub account.\n(Optional) The GitHub Student Developer Pack is a free offer from GitHub specially for students. It provides access to a variety of premium development tools and services free of charge for as long as you’re a student. GitHub Student Developer Pack\n\n\n\n\n\n\n\nExercise: Share your GitHub handle\n\n\n\nShare your GitHub handle/name on our Slack workspace, so we can add you to private repositories."
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html#configuring-your-computer",
    "href": "tutorials/lecture_01/01_setup.html#configuring-your-computer",
    "title": "How to set up my computer",
    "section": "Configuring your computer",
    "text": "Configuring your computer\n\nFor macOS Users: Installing Command Line Tools\nIf you’re using macOS, you should install Command Line Tools. This includes various utilities like compilers and—most crucial for this course—Git. Instead of installing it via the substantially large XCode software, we suggest a different method that won’t take up around 35 GB of your disk space.\nHere’s how to do it:\n\nOpen the Terminal application. It’s typically located in the /Applications/Utilities folder. Alternatively, press ⌘ and space bar simultaneously, type “terminal” in the search box, and select the Terminal application.\nOnce you see a prompt in the Terminal application, type xcode-select --install and hit Enter.\nFollow the instructions for installation when you’re prompted. Be aware it might take a few minutes to finish installing.\nClick here, skip the first step, and follow step 2 to 14.\n\nBy the end you should have created your first repository.\n\n\nFor Windows Users: Installing Git and Chrome or Firefox\nWe’ll be utilizing JupyterLab and/or VS Code in this tutorial. As JupyterLab is a browser-based application, it’s compatible with Chrome, Firefox, and Safari. However, Microsoft Edge isn’t supported. So, if you’re a Windows user, make sure you have either Chrome or Firefox installed.\nYou’ll also need to install Git. Here are the instructions to do so:\n\nClick here and follow the instructions provided.\n\nBy the end you should have created your first repository."
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html#setting-up-a-git-folder-in-your-home-directory",
    "href": "tutorials/lecture_01/01_setup.html#setting-up-a-git-folder-in-your-home-directory",
    "title": "How to set up my computer",
    "section": "Setting Up a ‘git’ Folder in Your Home Directory",
    "text": "Setting Up a ‘git’ Folder in Your Home Directory\nEstablishing a specific ‘git’ folder within your home directory is a great step to keep your projects organized and under version control. This guide will take you through the process of creating such a folder in your home directory. We recommend this setup as it’s simple, clean, and conveniently located in a familiar place.\n\nFor macOS/Linux Users\n\nOpen the Terminal application:\n\nFor macOS users, open Spotlight Search by pressing ⌘ and space bar simultaneously, then type “Terminal” and hit Enter.\nFor Linux users, you can use the search feature in your distribution’s application menu and type “Terminal”, or you can use the keyboard shortcut Ctrl + Alt+ T.\n\nOnce you’ve opened the Terminal, you should be automatically within your home directory. If not, type cd ~ to navigate to your home directory.\nNow, create the ‘git’ folder by typing mkdir git and hit Enter. This creates a new folder named ‘git’ in your home directory.\n\n\n\nFor Windows Users\n\nTo open Command Prompt, press the Windows key and type “Command Prompt”, and hit Enter.\nOnce in Command Prompt, navigate to your home directory by typing cd %HOMEPATH% and hitting Enter.\nNow, create the ‘git’ folder by typing mkdir git and hitting Enter. This creates a new folder named ‘git’ within your home directory.\n\nNow you have a dedicated ‘git’ folder in your home directory where you can clone, create and manage your repositories. This organization can help streamline your workflow and make working with Git a more enjoyable experience!"
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html#common-command-line-commands",
    "href": "tutorials/lecture_01/01_setup.html#common-command-line-commands",
    "title": "How to set up my computer",
    "section": "Common Command Line Commands",
    "text": "Common Command Line Commands\nThe command line is a powerful tool that allows users to interact directly with their operating system. Here’s a table featuring common command line commands for macOS/Linux and Windows:\n\n\n\n\n\n\n\n\nFunction\nmacOS/Linux Command\nWindows Command\n\n\n\n\nNavigate to home directory\ncd ~\ncd %HOMEPATH%\n\n\nList files in current directory\nls\ndir\n\n\nChange directory\ncd directoryName\ncd directoryName\n\n\nMake a new directory\nmkdir directoryName\nmkdir directoryName\n\n\nRemove a file\nrm fileName\ndel fileName\n\n\nRemove a directory\nrm -r directoryName\nrd /s directoryName\n\n\nCopy a file\ncp sourceFileName destinationFileName\ncopy sourceFileName destinationFileName\n\n\nMove or rename a file\nmv sourceFileName destinationFileName\nmove sourceFileName destinationFileName\n\n\nDisplay file’s contents\ncat fileName\ntype fileName\n\n\nClear the command line screen\nclear\ncls\n\n\n\nRemember, directoryName and fileName should be replaced with the actual name of the directory or file you want to interact with.\nTake the time to familiarize yourself with these commands as they form the foundation of your interactions with your operating system through the command line. With practice, you’ll find that many tasks can be performed more quickly and efficiently through the command line than through a graphical interface.\n\n\n\n\n\n\nExercise: Command line tools\n\n\n\nMove the test_demo repository you have created above (step 2-14) to your git folder."
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html#introduction-to-anaconda-and-virtual-environments",
    "href": "tutorials/lecture_01/01_setup.html#introduction-to-anaconda-and-virtual-environments",
    "title": "How to set up my computer",
    "section": "Introduction to Anaconda and Virtual Environments",
    "text": "Introduction to Anaconda and Virtual Environments\nAnaconda is an open-source distribution that simplifies package management and deployment for both Python and R. Particularly popular among data scientists and machine learning engineers, Anaconda is equipped a multitude of tools for data science, scientific computing, and much more.\nWhy should you use Anaconda?\nOne of the main reasons is its package manager called Conda. With Conda, not only can you easily install packages, but you can also set up isolated environments to keep your projects organized and prevent potential conflicts between package versions.\nHere’s how to download Anaconda:\n\nNavigate to Anaconda’s download page.\nChoose your operating system (Windows, macOS, or Linux).\nSelect the Python 3.x version and click Download.\nRun the downloaded file and follow the installation instructions.\n\nNow, let’s talk about virtual environments.\nVirtual environments are isolated environments where you can install packages and run code without affecting the rest of your system. These environments help you manage your project-specific dependencies separately, thus avoiding versioning conflicts and maintaining stability across all your projects.\n\n\n\n\n\n\nRemember\n\n\n\nEach project should ideally have its own virtual environment.\n\n\n\nCreating your first Conda environment\nTo create a virtual environment using Conda, you can follow these steps:\n\nOpen your terminal or command prompt.\nEnter conda create --name myenv python=3.10 replacing ‘myenv’ with the name you want to assign to your new environment. Note that we directly installed python (version 3.10).\nActivate your new environment by typing conda activate myenv (again, replace ‘myenv’ with the name of your environment).\nYou can now install packages either through conda install package_name or also using pip install package_name in the activated environment.\n\nNow, any packages that you install while this environment is activated will only affect this particular environment, leaving your global environment and any other virtual environments unchanged.\nBy using Anaconda and taking advantage of virtual environments, you can create a more organized, conflict-free coding setup, making your data science or programming projects significantly smoother and more manageable.\n\n\n\n\n\n\nExercise: Create course conda environment\n\n\n\n\nUse the commands above to create an environment with the name ch200 with python=3.10.\nActivate the created environment.\nAnd install the package jupyter.\n\n\n\n\n\n\n\n\n\nSolution: Create course conda environment\n\n\n\n\n\nIn the command line tool:\nconda create --name ch200 python=3.10\nconda activate ch200\nconda install jupyter"
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html#introduction-to-ides-and-text-editors",
    "href": "tutorials/lecture_01/01_setup.html#introduction-to-ides-and-text-editors",
    "title": "How to set up my computer",
    "section": "Introduction to IDEs and Text Editors",
    "text": "Introduction to IDEs and Text Editors\nAn important component of any programming or coding project is the tool used to write and edit your code. Two of the main options that we will be working with in this course are JupyterLab and Visual Studio Code (VS Code).\n\nJupyterLab\nJupyterLab is an integrated development environment (IDE) for Jupyter Notebooks, a project of the Project Jupyter open-source project. JupyterLab is web-based and provides a user-friendly interface for interacting with Jupyter notebooks, code editors, data file viewers, terminals, and more, making it a great tool for data science projects.\n\n\nVisual Studio Code (VS Code)\nVisual Studio Code, often just called VS Code, is a popular free source-code editor developed by Microsoft. It includes support for debugging, embedded Git control, syntax highlighting, code refactoring, and more. Its features are highly extendable through plugins, and it supports a multitude of programming languages.\n\n\nDifferences between JupyterLab and VS Code\nWhile both JupyterLab and VS Code are powerful tools, there are key differences between the two:\n\nEnvironment: JupyterLab provides a web-based interface and is ideal for interactive and exploratory computing. On the other hand, VS Code is a comprehensive text editor and is more akin to a full-fledged integrated development environment.\nUse Case: JupyterLab excels when working with Jupyter notebooks and tasks that require visualizing data, running data analysis, and scientific computing in Python, Julia, R and other similar languages. VS Code shines when developing applications in various programming languages and it’s great for writing and managing codebases.\nFeatures: JupyterLab primarily offers an intuitive interface for running and editing Jupyter notebooks, viewing plots, and inspecting file variables. VS Code offers debugging tools, has Git commands built-in, can be customized and extended with plugins, and supports a multitude of programming languages.\n\nDepending on your project, you could find one tool to be more efficient than the other. JupyterLab’s interactive workflow could be beneficial for tasks such as data exploration and visualization, whereas VS Code might be more suited to application development. Ultimately, both are extremely useful and offer unique capabilities that could help improve your programming workflow."
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html#installing-and-getting-started-with-jupyterlab",
    "href": "tutorials/lecture_01/01_setup.html#installing-and-getting-started-with-jupyterlab",
    "title": "How to set up my computer",
    "section": "Installing and Getting Started with JupyterLab",
    "text": "Installing and Getting Started with JupyterLab\nHere’s how to install JupyterLab using Conda:\n\nOpen your Terminal (macOS/Linux) or Command Prompt (Windows).\nIf you have a Conda environment you’d like to use, activate it by typing conda activate myenv replacing ‘myenv’ with the name of your environment.\nTo install JupyterLab, type conda install -c conda-forge jupyterlab and hit Enter.\n\nTo start JupyterLab:\n\nIn your terminal or command prompt, ensure your desired Conda environment is activated.\nType jupyter lab and hit Enter. This should start the JupyterLab application and open a new tab in your default web browser displaying the JupyterLab interface.\n\nOnce in the interface, you can create a new notebook by clicking on the Python 3 icon in the Launcher, or by going to File -&gt; New -&gt; Notebook."
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html#advanced-installing-and-getting-started-with-visual-studio-code",
    "href": "tutorials/lecture_01/01_setup.html#advanced-installing-and-getting-started-with-visual-studio-code",
    "title": "How to set up my computer",
    "section": "(Advanced) Installing and Getting Started with Visual Studio Code",
    "text": "(Advanced) Installing and Getting Started with Visual Studio Code\nHere’s how to install VS Code:\n\nNavigate to VS Code’s download page.\nAccording to your operating system (Windows, macOS, or Linux), download the appropriate installation file and run it.\nFollow the installation instructions provided in the installer.\n\nTo start VS Code:\n\nOpen VS Code from your Start menu (Windows), Applications folder (Mac), or application launcher (Linux).\n\nOnce you’ve opened VS Code, you can start creating or opening files straight away:\n\nTo open a file, go to File -&gt; Open File and navigate to your file.\nTo create a new file, go to File -&gt; New File.\n\nRemember that you can customize and extend your VS Code functionalities by searching and installing extensions in the Extensions view (View -&gt; Extensions).\nWorking with JupyterLab and VS Code might seem overwhelming at first, but practice and familiarity will soon make these tools an essential part of your coding and data analysis toolbox.\n\nInstalling Jupyter Notebook and Python extensions for VS Code\nVS Code supports a variety of extensions that can enhance your coding experience. For this setup, we are particularly interested in the Python extension, which includes rich support for the Python language, and the Jupyter Notebook extension, which allows you to create and run Jupyter notebooks within VS Code.\nHere’s how to install these extensions:\n\nOpen VS Code.\nClick on the Extensions view icon on the Sidebar located on the left-hand side, or, alternatively, use the shortcut Ctrl+Shift+X.\nIn the Extensions view search bar, type Python and look for the extension named Python developed by Microsoft. Click Install to add this extension.\nAfter installing the Python extension, search for Jupyter in the Extensions view search bar. Look for the Jupyter extension also developed by Microsoft. Click Install to add it.\n\nWith those two extensions installed, you can now create or open .ipynb (Jupyter Notebook) files and use VS Code to develop Python applications. When you open a .ipynb file, VS Code will enter the notebook editor mode where you can create and run Jupyter notebook cells.\nTo create a new Jupyter notebook in VS Code:\n\nGo to File -&gt; New File.\nFrom the command palette (Ctrl+Shift+P), type Python: Select Interpreter to select your previously created Conda or Python environment.\nBack in the command palette, type Jupyter: Create New Blank Notebook, an .ipynb file is created and you can start writing your Python code in cells.\n\nFinally, remember that VS Code also comes with a lot built-in features for coding, but might be a bit harder to handle for beginners."
  },
  {
    "objectID": "tutorials/lecture_01/01_setup.html#getting-familiar-with-github",
    "href": "tutorials/lecture_01/01_setup.html#getting-familiar-with-github",
    "title": "How to set up my computer",
    "section": "Getting Familiar with GitHub",
    "text": "Getting Familiar with GitHub\nNow that you’re set up with your coding environments and text editors, it’s time to get comfortable with an essential tool for any modern developer - GitHub.\nGitHub is a web-based hosting service for version control using Git. It’s a platform where over 65 million developers collaborate on code, making it not just a tool, but a social network for developers. On GitHub, you can manage and store revisions of projects, share your projects with others, collaborate with teammates, and even create separate branches to experiment without affecting the main project.\nIn the upcoming sections, you’ll learn about creating your own repositories, cloning existing repositories, the concept of forking, creating pull requests, managing merge conflicts, and more. GitHub is not just a tool for version control; understanding GitHub also exposes you to the workflow that most developers are using today. This makes it a crucial skillset for any aspiring developer or data scientist.\nSo prepare for an exciting journey into the world of GitHub, which will open up new horizons in your coding, collaboration, and career opportunities!"
  }
]